import { useState } from "react"
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Bell, Send, Clock } from "lucide-react"
import { toast } from "react-toastify"

interface Notification {
  notificationId: number
  title: string
  message: string
  category: string
  isRead: boolean
  createdAt: string
}

// üß© Mock data m·∫´u
const mockNotifications: Notification[] = [
  {
    notificationId: 1,
    title: "C·∫≠p nh·∫≠t ch∆∞∆°ng m·ªõi!",
    message: "Truy·ªán 'Th·∫ø Gi·ªõi Ph√©p Thu·∫≠t' ƒë√£ ra ch∆∞∆°ng 46, ƒë·ªçc ngay nh√©!",
    category: "comic_update",
    isRead: false,
    createdAt: "2025-10-05T10:30:00",
  },
  {
    notificationId: 2,
    title: "Khuy·∫øn m√£i n·∫°p xu 20%",
    message: "N·∫°p xu h√¥m nay nh·∫≠n th√™m 20% gi√° tr·ªã. Th·ªùi gian: 5‚Äì10/10/2025.",
    category: "promotion",
    isRead: true,
    createdAt: "2025-10-04T09:10:00",
  },
  {
    notificationId: 3,
    title: "T√°c gi·∫£ b·∫°n theo d√µi ƒë√£ ƒëƒÉng truy·ªán m·ªõi",
    message: "T√°c gi·∫£ 'Nguy·ªÖn VƒÉn A' v·ª´a ph√°t h√†nh truy·ªán 'Anh H√πng Kh√¥ng Mu·ªën C·ª©u Th·∫ø Gi·ªõi'.",
    category: "follow",
    isRead: false,
    createdAt: "2025-10-03T14:55:00",
  },
  {
    notificationId: 4,
    title: "C·∫≠p nh·∫≠t h·ªá th·ªëng",
    message: "H·ªá th·ªëng s·∫Ω b·∫£o tr√¨ l√∫c 00:00 ng√†y 10/10 ƒë·ªÉ n√¢ng c·∫•p hi·ªáu nƒÉng.",
    category: "system",
    isRead: true,
    createdAt: "2025-10-02T23:00:00",
  },
]

export default function ManageNotification() {
  const [notifications, setNotifications] = useState<Notification[]>(mockNotifications)
  const [title, setTitle] = useState("")
  const [message, setMessage] = useState("")
  const [category, setCategory] = useState("system")
  const [loading, setLoading] = useState(false)

  const handleCreate = () => {
    if (!title || !message) {
      toast.warn("Vui l√≤ng nh·∫≠p ƒë·ªß ti√™u ƒë·ªÅ v√† n·ªôi dung")
      return
    }

    const newNotification: Notification = {
      notificationId: notifications.length + 1,
      title,
      message,
      category,
      isRead: false,
      createdAt: new Date().toISOString(),
    }

    setNotifications([newNotification, ...notifications])
    setTitle("")
    setMessage("")
    setCategory("system")
    toast.success("ƒê√£ t·∫°o th√¥ng b√°o m·ªõi!")
  }

  const formatDate = (date: string) => new Date(date).toLocaleString("vi-VN")

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-3xl font-bold">Qu·∫£n l√Ω Th√¥ng b√°o</h1>
        <p className="text-muted-foreground">T·∫°o v√† xem c√°c th√¥ng b√°o g·ª≠i ƒë·∫øn ng∆∞·ªùi d√πng</p>
      </div>

      {/* Form t·∫°o th√¥ng b√°o */}
      <Card>
        <CardHeader>
          <CardTitle>T·∫°o Th√¥ng b√°o m·ªõi</CardTitle>
          <CardDescription>G·ª≠i th√¥ng b√°o ƒë·∫øn ng∆∞·ªùi d√πng ho·∫∑c to√†n h·ªá th·ªëng</CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <Input
            placeholder="Ti√™u ƒë·ªÅ th√¥ng b√°o"
            value={title}
            onChange={(e) => setTitle(e.target.value)}
          />
          <Textarea
            placeholder="N·ªôi dung chi ti·∫øt..."
            value={message}
            onChange={(e) => setMessage(e.target.value)}
            className="min-h-[100px]"
          />
          <Select value={category} onValueChange={setCategory}>
            <SelectTrigger>
              <SelectValue placeholder="Ch·ªçn lo·∫°i th√¥ng b√°o" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="system">H·ªá th·ªëng</SelectItem>
              <SelectItem value="comic_update">C·∫≠p nh·∫≠t truy·ªán</SelectItem>
              <SelectItem value="follow">Theo d√µi</SelectItem>
              <SelectItem value="comment">B√¨nh lu·∫≠n</SelectItem>
              <SelectItem value="promotion">Khuy·∫øn m√£i</SelectItem>
            </SelectContent>
          </Select>

          <Button onClick={handleCreate} disabled={loading} className="flex items-center gap-2">
            <Send className="h-4 w-4" /> {loading ? "ƒêang g·ª≠i..." : "G·ª≠i th√¥ng b√°o"}
          </Button>
        </CardContent>
      </Card>

      {/* Danh s√°ch th√¥ng b√°o */}
      <Card>
        <CardHeader>
          <CardTitle>Danh s√°ch th√¥ng b√°o ({notifications.length})</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="rounded-md border overflow-x-auto">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Ti√™u ƒë·ªÅ</TableHead>
                  <TableHead>N·ªôi dung</TableHead>
                  <TableHead>Lo·∫°i</TableHead>
                  <TableHead>Tr·∫°ng th√°i</TableHead>
                  <TableHead>Th·ªùi gian</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {notifications.length > 0 ? (
                  notifications.map((n) => (
                    <TableRow key={n.notificationId}>
                      <TableCell className="font-medium">{n.title}</TableCell>
                      <TableCell className="truncate max-w-[350px]">{n.message}</TableCell>
                      <TableCell className="capitalize">{n.category}</TableCell>
                      <TableCell>
                        {n.isRead ? (
                          <span className="text-green-600 font-medium">ƒê√£ ƒë·ªçc</span>
                        ) : (
                          <span className="text-yellow-600 font-medium">Ch∆∞a ƒë·ªçc</span>
                        )}
                      </TableCell>
                      <TableCell>
                        <div className="flex items-center gap-1 text-sm text-muted-foreground">
                          <Clock className="h-4 w-4" />
                          {formatDate(n.createdAt)}
                        </div>
                      </TableCell>
                    </TableRow>
                  ))
                ) : (
                  <TableRow>
                    <TableCell colSpan={5} className="text-center py-4 text-muted-foreground">
                      Kh√¥ng c√≥ th√¥ng b√°o n√†o.
                    </TableCell>
                  </TableRow>
                )}
              </TableBody>
            </Table>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}
