const { Comment, User, sequelize, Comic, Notification } = require('../models/index');
const { Op } = require('sequelize');
const { updateQuestProgress } = require('../services/updateQuestService');
// L·∫•y b√¨nh lu·∫≠n c√≥ ph√¢n trang
const getCommentsByComic = async (req, res) => {
    try {
        const { slug } = req.params;
        const page = parseInt(req.query.page) || 1;
        const limit = 10;
        const offset = (page - 1) * limit;
        const userId = req.user ? req.user.userId : null;

        const { count, rows } = await Comment.findAndCountAll({
            include: [
                {
                    model: Comic,
                    attributes: [],
                    where: { slug } // l·ªçc comic theo slug
                },
                { model: User, attributes: ['username'] },
                {
                    model: Comment,
                    as: 'replies',
                    include: [{ model: User, attributes: ['username'] }]
                }
            ],
            where: { parentId: null },
            attributes: [
                'commentId', 'content', 'createdAt',
                [sequelize.literal(`(SELECT COUNT(*) FROM CommentLikes WHERE CommentLikes.commentId = Comment.commentId)`), 'likes'],
                [sequelize.literal(`(EXISTS(SELECT 1 FROM CommentLikes WHERE CommentLikes.commentId = Comment.commentId AND CommentLikes.userId = ${userId || 'NULL'}))`), 'isLiked']
            ],
            limit,
            offset,
            order: [['createdAt', 'DESC']],
            distinct: true
        });

        res.json({
            totalItems: count,
            comments: rows.map(c => c.get({ plain: true })),
            totalPages: Math.ceil(count / limit),
            currentPage: page,
        });
    } catch (error) {
        console.error("L·ªói khi l·∫•y danh s√°ch b√¨nh lu·∫≠n cho truy·ªán",error);
        res.status(500).json({ message: 'L·ªói m√°y ch·ªß' });
    }
};

// T·∫°o b√¨nh lu·∫≠n m·ªõi
const createComment = async (req, res) => {
    try {
        const { comicId, content, parentId } = req.body;
        const userId = req.user.userId;

        if (!content) {
            return res.status(400).json({ message: 'N·ªôi dung b√¨nh lu·∫≠n l√† b·∫Øt bu·ªôc' });
        }

        const newComment = await Comment.create({
            comicId,
            userId,
            content,
            parentId,
        });

        // Tr·∫£ v·ªÅ comment m·ªõi k√®m th√¥ng tin user
        const result = await Comment.findByPk(newComment.commentId, {
            include: [{ model: User, attributes: ['username'] }]
        });
        await updateQuestProgress(userId, 'comment');
        res.status(201).json(result.get({ plain: true }));
    } catch (error) {
        console.error("L·ªói khi t·∫°o b√¨nh lu·∫≠n",error);
        res.status(500).json({ message: 'L·ªói m√°y ch·ªß' });
    }
};

// Like/Unlike b√¨nh lu·∫≠n
const toggleLikeComment = async (req, res) => {
    try {
        const { commentId } = req.params;
        const userId = req.user.userId;

        const CommentLike = sequelize.models.CommentLikes;
        const existingLike = await CommentLike.findOne({ where: { userId, commentId } });

        if (existingLike) {
            await existingLike.destroy();
            res.json({ liked: false, message: 'B·ªè th√≠ch th√†nh c√¥ng' });
        } else {
            await CommentLike.create({ userId, commentId });
            res.json({ liked: true, message: 'Th√≠ch th√†nh c√¥ng' });
        }
    } catch (error) {
        console.error("L·ªói khi th√≠ch ho·∫∑c kh√¥ng th√≠ch:", error);
        res.status(500).json({ message: 'L·ªói m√°y ch·ªß' });
    }
};
// H√†m l·∫•y c√°c b√¨nh lu·∫≠n g·∫ßn ƒë√¢y nh·∫•t 
const getRecentComments = async (req, res) => {
    try {
        const comments = await Comment.findAll({
            limit: 10, // L·∫•y 10 b√¨nh lu·∫≠n m·ªõi nh·∫•t
            where: { parentId: null }, // Ch·ªâ l·∫•y c√°c b√¨nh lu·∫≠n g·ªëc, kh√¥ng l·∫•y tr·∫£ l·ªùi
            order: [['createdAt', 'DESC']],
            attributes: ['commentId', 'content', 'createdAt'],
            include: [
                {
                    model: User,
                    attributes: ['username', 'avatar'], // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
                },
                {
                    model: Comic,
                    attributes: ['title', 'slug'], // L·∫•y th√¥ng tin truy·ªán ƒë·ªÉ t·∫°o link
                }
            ]
        });

        res.json(comments);
    } catch (error) {
        console.error("L·ªói khi l·∫•y b√¨nh lu·∫≠n g·∫ßn ƒë√¢y:", error);
        res.status(500).json({ message: "L·ªói m√°y ch·ªß" });
    }
};
// L·∫•y t·∫•t c·∫£ b√¨nh lu·∫≠n (Admin)
const getAllComments = async (req, res) => {
  try {
    const page = parseInt(req.query.page) || 1;
    const limit = 20;
    const offset = (page - 1) * limit;

    const { count, rows } = await Comment.findAndCountAll({
      include: [
        {
          model: User,
          attributes: ["userId", "username", "email", "avatar"],
        },
        {
          model: Comic,
          attributes: ["comicId", "title"],
        },
      ],
      attributes: [
        "commentId",
        "content",
        "createdAt",
        "comicId",
        "parentId",
        [
          sequelize.literal(
            `(SELECT COUNT(*) FROM CommentLikes WHERE CommentLikes.commentId = Comment.commentId)`
          ),
          "likes",
        ],
        [
          sequelize.literal(
            `(SELECT COUNT(*) FROM Reports WHERE Reports.targetId = Comment.commentId AND Reports.type = 'comment')`
          ),
          "reports",
        ],
      ],
      order: [["createdAt", "DESC"]],
      limit,
      offset,
      distinct: true,
    });

    // Chu·∫©n h√≥a d·ªØ li·ªáu tr·∫£ v·ªÅ
    const formattedComments = rows.map((c) => {
      const data = c.get({ plain: true });
      return {
        id: data.commentId,
        content: data.content,
        createdAt: data.createdAt,
        likes: parseInt(data.likes) || 0,
        reports: parseInt(data.reports) || 0,
        mangaTitle: data.Comic ? data.Comic.title : "Kh√¥ng x√°c ƒë·ªãnh",
        chapterNumber: null, // N·∫øu b·∫°n mu·ªën b·ªï sung sau
        user: {
          name: data.User?.username || "·∫®n danh",
          email: data.User?.email || "",
          avatar: data.User?.avatar || null,
        },
      };
    });

    res.json({
      totalItems: count,
      comments: formattedComments,
      totalComments: formattedComments.length,
      totalPages: Math.ceil(count / limit),
      currentPage: page,
    });
  } catch (error) {
    console.error("L·ªói khi l·∫•y t·∫•t c·∫£ b√¨nh lu·∫≠n:", error);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß" });
  }
};

// X√≥a b√¨nh lu·∫≠n (Admin) v√† g·ª≠i th√¥ng b√°o cho ng∆∞·ªùi d√πng
const deleteComment = async (req, res) => {
  try {
    const { id } = req.params;

    // Ki·ªÉm tra b√¨nh lu·∫≠n t·ªìn t·∫°i
    const comment = await Comment.findByPk(id);
    if (!comment) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√¨nh lu·∫≠n." });
    }

    await sequelize.transaction(async (t) => {
      // X√≥a like
      await sequelize.models.CommentLikes.destroy({
        where: { commentId: id },
        transaction: t,
      });

      // X√≥a reply
      await Comment.destroy({
        where: { parentId: id },
        transaction: t,
      });

      // X√≥a report
      if (sequelize.models.Report) {
        await sequelize.models.Report.destroy({
          where: { targetId: id, type: "comment" },
          transaction: t,
        });
      }

      // X√≥a comment ch√≠nh
      await comment.destroy({ transaction: t });

      // üîî G·ª≠i th√¥ng b√°o cho ng∆∞·ªùi d√πng
      await Notification.create({
        userId: comment.userId,
        category: "comment",
        title: "B√¨nh lu·∫≠n c·ªßa b·∫°n ƒë√£ b·ªã x√≥a",
        message:
          "B√¨nh lu·∫≠n c·ªßa b·∫°n ƒë√£ b·ªã qu·∫£n tr·ªã vi√™n x√≥a do vi ph·∫°m quy ƒë·ªãnh.",
      }, { transaction: t });
    });

    res.json({ message: "ƒê√£ x√≥a b√¨nh lu·∫≠n v√† g·ª≠i th√¥ng b√°o cho ng∆∞·ªùi d√πng." });
  } catch (error) {
    console.error("L·ªói khi x√≥a b√¨nh lu·∫≠n:", error);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß." });
  }
};

module.exports = { deleteComment };

module.exports = {
    getCommentsByComic,
    createComment,
    toggleLikeComment,
    getRecentComments,
    getAllComments,
    deleteComment
};
